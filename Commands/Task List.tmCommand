<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

require 'rubygems'

search_path = ENV['TM_PROJECT_DIRECTORY'] || ENV['TM_DIRECTORY']


def printTasks(heading, tasks)
	unset_date = Date.new(3000,1,1)	
	h_text = heading != unset_date ? heading.to_s : "No Due Date"
	print "&lt;h2&gt;" + h_text + "&lt;/h2&gt;"
	print "&lt;ul&gt;"
	tasks.each do |task|
		print "&lt;li&gt;" + task + "&lt;/li&gt;"
	end
	print "&lt;/ul&gt;"
end

def getDueDate(taskLine)
	unset_date = Date.new(3000,1,1)	

	due = taskLine[/@due\((\d{4}-\d{2}-\d{2})\)/i]
	if due
		due = Date.parse(due[5, 10])
	else
		due = unset_date
	end
	return due
end


tasksByDate = {}

if search_path != nil
	tasks = %x[grep -r -e ^[[:space:]]*-.* #{search_path}]
	tasks.each do |task_line|
		parts = task_line.split(":");
		if parts.length &gt; 1
			t = parts[1]
			due = getDueDate(t)
			unless tasksByDate[due] then tasksByDate[due] = [] end
			tasksByDate[due].push(t)
		end
	end
end



tasksByDate.keys.sort.each do |date|
	printTasks(date, tasksByDate[date])
	print("&lt;br/&gt;")
end</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^~@a</string>
	<key>name</key>
	<string>Task List</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>8A55B9A6-0BAB-40F3-94EA-9A0A03A96D88</string>
</dict>
</plist>
